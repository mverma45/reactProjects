import { Mask } from 'msw/lib/types/setupWorker/glossary';
import { DefaultRequestBody, ResponseResolver } from 'msw/lib/types/handlers/RequestHandler';
import { RestContext, RestHandler, RestRequest, RequestParams } from 'msw/lib/types/handlers/RestHandler';
export declare const rest: {
    head: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    get: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    post: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    put: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    delete: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    patch: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
    options: <RequestBodyType extends DefaultRequestBody = DefaultRequestBody, ResponseBody extends DefaultRequestBody = any, Params extends RequestParams = RequestParams>(mask: Mask, resolver: ResponseResolver<RestRequest<RequestBodyType, Params>, RestContext, ResponseBody>) => RestHandler<import("msw/lib/types/handlers/RequestHandler").MockedRequest<DefaultRequestBody>>;
};
